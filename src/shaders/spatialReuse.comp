#version 460 core
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable
#extension GL_EXT_scalar_block_layout : enable

#include "structs/light.glsl"
#include "structs/sceneStructs.glsl"
#include "structs/restirStructs.glsl"
#include "headers/binding.glsl"


layout(local_size_x = SPATIAL_REUSE_GROUP_SIZE_X, local_size_y = SPATIAL_REUSE_GROUP_SIZE_Y, local_size_z = 1) in;

layout(set = 0, binding = B_SCENE) uniform Restiruniforms{
	SceneUniforms uniforms;
};

layout(set = 1, binding = B_POINT_LIGHTS, scalar) buffer PointLights {
	pointLight lights[];
} pointLights;
layout(set = 1, binding = B_TRIANGLE_LIGHTS, scalar) buffer TriangleLights {
	triangleLight lights[];
} triangleLights;
layout(set = 1, binding = B_ENVIRONMENTAL_MAP) uniform sampler2D environmentalTexture;

layout(set = 2, binding = B_FRAME_WORLD_POSITION, rgba32f) uniform image2D frameWorldPosition;
layout(set = 2, binding = B_FRAME_ALBEDO, rgba32f) uniform image2D frameAlbedo;
layout(set = 2, binding = B_FRAME_NORMAL, rgba32f) uniform image2D frameNormal;
layout(set = 2, binding = B_FRAME_MATERIAL_PROPS, rgba32f) uniform image2D frameRoughnessMetallic;


layout(set = 2, binding = B_TMP_RESERVIORS_INFO, rgba32f) uniform image2D reservoirInfoBuf;
layout(set = 2, binding = B_TMP_RESERVIORS_WEIGHT, rgba32f) uniform image2D reservoirWeightBuf;

layout(set = 2, binding = B_RESERVIORS_INFO, rgba32f) uniform image2D resultReservoirInfoBuf;
layout(set = 2, binding = B_RESERVIORS_WEIGHT, rgba32f) uniform image2D resultReservoirWeightBuf;

#define NUM_NEIGHBORS 3

#include "headers/random.glsl"
#include "headers/restirUtils.glsl"
#include "headers/reservoir.glsl"

void main() {

	uvec2 pixelCoord = gl_GlobalInvocationID.xy;
	ivec2 coordImage = ivec2(gl_GlobalInvocationID.xy);

	uvec2 s = pcg2d(pixelCoord * int(clockARB()));
	uint  seed = s.x + s.y;

	if (any(greaterThanEqual(pixelCoord, uniforms.screenSize))) {
		return;
	}

	GeometryInfo gInfo;

	gInfo.albedo = imageLoad(frameAlbedo, coordImage);
	gInfo.normal = imageLoad(frameNormal, coordImage).xyz;
	gInfo.worldPos = imageLoad(frameWorldPosition, coordImage).xyz;
	vec2 roughnessMetallic = imageLoad(frameRoughnessMetallic, coordImage).xy;
	gInfo.roughness = roughnessMetallic.x;
	gInfo.metallic = roughnessMetallic.y;
	gInfo.albedoLum = luminance(gInfo.albedo.r, gInfo.albedo.g, gInfo.albedo.b);
	gInfo.camPos = uniforms.cameraPos.xyz;

	float exist = imageLoad(frameWorldPosition, coordImage).w;
	if (exist < 0.5) {
		return;
	}


	uint reservoirIndex = pixelCoord.y * uniforms.screenSize.x + pixelCoord.x;
	vec4 resovirInfo = imageLoad(reservoirInfoBuf, coordImage);
	vec4 resovirWeight = imageLoad(reservoirWeightBuf, coordImage);
	Reservoir res = unpackResovirStruct(resovirInfo, resovirWeight);

	if ((uniforms.flags & RESTIR_SPATIAL_REUSE_FLAG) != 0) {
		packResovirStruct(res, resovirInfo, resovirWeight);
		imageStore(resultReservoirInfoBuf, coordImage, resovirInfo);
		imageStore(resultReservoirWeightBuf, coordImage, resovirWeight);
		return;
	}

	for (int i = 0; i < NUM_NEIGHBORS; ++i) {
		float angle = rnd(seed) * 2.0 * M_PI;
		float radius = sqrt(rnd(seed)) * uniforms.spatialRadius;

		ivec2 randNeighbor = ivec2(round(vec2(cos(angle), sin(angle)) * radius));
		randNeighbor = clamp(ivec2(pixelCoord) + randNeighbor, ivec2(0), ivec2(uniforms.screenSize - 1));

		GeometryInfo n_gInfo;

		n_gInfo.worldPos = imageLoad(frameWorldPosition, ivec2(randNeighbor)).xyz;
		n_gInfo.normal = imageLoad(frameNormal, ivec2(randNeighbor)).xyz;
		n_gInfo.albedo = imageLoad(frameAlbedo, ivec2(randNeighbor));
		vec3 neighborRoughnessMetallic = imageLoad(frameRoughnessMetallic, ivec2(randNeighbor)).xyz;
		n_gInfo.roughness = neighborRoughnessMetallic.x;
		n_gInfo.metallic = neighborRoughnessMetallic.y;
		n_gInfo.albedoLum = luminance(n_gInfo.albedo.r, n_gInfo.albedo.g, n_gInfo.albedo.b);
		n_gInfo.camPos = gInfo.camPos;

		vec3 positionDiff = gInfo.worldPos - n_gInfo.worldPos;
		if (dot(positionDiff, positionDiff) < 0.01f) {
			vec3 albedoDiff = gInfo.albedo.xyz - n_gInfo.albedo.xyz;
			if (dot(albedoDiff, albedoDiff) < 0.01f) {
				float normalDot = dot(gInfo.normal, n_gInfo.normal);
				if (normalDot > 0.5f) {
					uint neighborIndex = randNeighbor.y * uniforms.screenSize.x + randNeighbor.x;
					vec4 resovirInfo = imageLoad(reservoirInfoBuf, ivec2(randNeighbor));
					vec4 resovirWeight = imageLoad(reservoirWeightBuf, ivec2(randNeighbor));
					Reservoir randRes = unpackResovirStruct(resovirInfo, resovirWeight);

					combineReservoirs(res, randRes, gInfo, n_gInfo, seed);
				}
			}
		}
	}
	packResovirStruct(res, resovirInfo, resovirWeight);
	imageStore(resultReservoirInfoBuf, coordImage, resovirInfo);
	imageStore(resultReservoirWeightBuf, coordImage, resovirWeight);
}
